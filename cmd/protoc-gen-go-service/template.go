package main

import "html/template"

type ServiceTemplateInput struct {
	PluginVersion      string
	ProtocVersion      string
	FileDescriptorPath string
	PackageName        string
	ServiceNames       []string
}

var ServiceTemplate = template.Must(
	template.New("service").Parse(`// Code generated by protoc-gen-go-service. DO NOT EDIT.
// versions:
//     - protoc-gen-go-service {{ .PluginVersion }}
//     - protoc                {{ .ProtocVersion }}
// source: {{.FileDescriptorPath}}

package {{ .PackageName }}

import (
	"context"

	"github.com/fullstorydev/grpchan/inprocgrpc"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
)

{{ range .ServiceNames }}
type {{ . }}Service struct {
	server {{ . }}Server
}

func New{{ . }}Service(server {{ . }}Server) *{{ . }}Service {
	return &{{ . }}Service{
		server: server,
	}
}

func (s *{{ . }}Service) Register(registrar grpc.ServiceRegistrar) error {
	Register{{ . }}Server(registrar, s.server)
	return nil
}

func (s *{{ . }}Service) RegisterProxy(ctx context.Context, ch *inprocgrpc.Channel, mux *runtime.ServeMux) error {
	Register{{ . }}Server(ch, s.server)
	return Register{{ . }}HandlerClient(ctx, mux, New{{ . }}Client(ch))
}

{{ end }}
`),
)
