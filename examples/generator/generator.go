package main

import (
	"flag"
	"fmt"
	"os"

	"google.golang.org/protobuf/compiler/protogen"

	"github.com/weave-labs/protoc-plugin/pkg/plugin"
)

type config struct {
	exampleStringFlag string
	exampleIntFlag    int
}

type exampleGenerator struct {
	cfg config
}

// FlagSet returns a flag.FlagSet used for configuring the generator.
//
//nolint:mnd // example
func (g *exampleGenerator) FlagSet() *flag.FlagSet {
	var flags flag.FlagSet

	flags.StringVar(&g.cfg.exampleStringFlag, "example_string_flag", "default", "Example string flag")
	flags.IntVar(&g.cfg.exampleIntFlag, "example_int_flag", 42, "Example int flag")

	return &flags
}

// Generate implements the generation logic.
// It iterates over each file that is marked for generation and creates a dummy output.
func (g *exampleGenerator) Generate(gen *protogen.Plugin) error {
	for _, f := range gen.Files {
		if !f.Generate {
			continue
		}

		filename := f.GeneratedFilenamePrefix + "_example.go"
		content := fmt.Sprintf(
			"// Code generated by %s (%s); DO NOT EDIT.\n\npackage %s\n\n// Example generated file for %s\n",
			g.Name(),
			g.Version(),
			f.GoPackageName,
			f.Desc.Name(),
		)
		// Create a new file in the generator.
		g := gen.NewGeneratedFile(filename, f.GoImportPath)
		if _, err := g.Write([]byte(content)); err != nil {
			return fmt.Errorf("failed to write to file %s: %w", filename, err)
		}
	}

	return nil
}

// Name returns the name of the generator.
func (g *exampleGenerator) Name() string {
	return "exampleGenerator"
}

// Version returns the version of the generator.
func (g *exampleGenerator) Version() string {
	return "v0.1.0"
}

func main() {
	if err := plugin.Run(os.Stdin, os.Stdout, new(exampleGenerator)); err != nil {
		fmt.Fprintf(os.Stderr, "error: %v\n", err)
		os.Exit(1)
	}
}
